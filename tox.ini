[tox]
envlist = pep8,py35,py35dj20,py27,eslint,karma,docs,releasenotes
minversion = 2.3.2
skipsdist = True

[testenv]
usedevelop = True
deps =
  -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt}
  -r{toxinidir}/requirements.txt
  -r{toxinidir}/test-requirements.txt
commands = python manage.py test {posargs} --settings=senlin_dashboard.test.settings

[testenv:venv]
commands = {posargs}

[testenv:pep8]
commands = flake8

[flake8]
show-source = True
enable-extensions = H203,H106
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build,.ropeproject,tools,node_modules

[testenv:cover]
commands = python setup.py testr --coverage --testr-args='{posargs}'

[testenv:py27]
commands =
  # Clean-up env and install horizon from git
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} pre
  # Run test
  python manage.py test {posargs}
  # Clean-up env except log
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} post

[testenv:py35]
basepython = python3.5
commands =
  # Clean-up env and install horizon from git
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} pre
  # Run test
  python manage.py test {posargs}
  # Clean-up env except log
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} post

[testenv:py35dj20]
basepython = python3.5
commands =
  # Clean-up env and install horizon from git
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} pre
  # Run test
  pip install django>=2.0,<2.1
  python manage.py test {posargs}
  # Clean-up env except log
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} post

[testenv:eslint]
whitelist_externals =
  npm
commands =
  # Clean-up env and install horizon from git
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} pre
  # Run test
  npm install
  npm run lint
  # Clean-up env except log
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} post

[testenv:karma]
whitelist_externals =
  npm
commands =
  # Clean-up env and install horizon from git
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} pre
  # Run test
  npm install
  npm run test
  # Clean-up env except log
  {toxinidir}/tools/tox_helper.sh {envname} {basepython} post

[testenv:docs]
deps =
  -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt}
  -r{toxinidir}/doc/requirements.txt
commands=
  sphinx-build -W -b html doc/source doc/build/html

[testenv:releasenotes]
deps =
  {[testenv:docs]deps}
commands =
  sphinx-build -a -E -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:debug]
whitelist_externals = oslo_debug_helper
commands = oslo_debug_helper -t senlin_dashboard/test {posargs}

[testenv:makemessages]
commands =
    pybabel extract -F babel-django.cfg -o senlin_dashboard/locale/django.pot -k gettext_noop -k gettext_lazy -k ngettext_lazy:1,2 -k ugettext_noop -k ugettext_lazy -k ungettext_lazy:1,2 -k npgettext:1c,2,3 -k pgettext_lazy:1c,2 -k npgettext_lazy:1c,2,3 senlin_dashboard
    pybabel extract -F babel-djangojs.cfg -o senlin_dashboard/locale/djangojs.pot -k gettext_noop -k gettext_lazy -k ngettext_lazy:1,2 -k ugettext_noop -k ugettext_lazy -k ungettext_lazy:1,2 -k npgettext:1c,2,3 -k pgettext_lazy:1c,2 -k npgettext_lazy:1c,2,3 senlin_dashboard

[testenv:lower-constraints]
basepython = python3
deps =
  -c{toxinidir}/lower-constraints.txt
  -r{toxinidir}/test-requirements.txt
  -r{toxinidir}/requirements.txt
